1) Backend todo
	1) Build data-receiving and processing singleton
		1) New/updated Schedule
			1) Check to see if input schedule has cycle
			2) Check to see if input schedule contains valid courses
		2) new/updated Course
			1) Check to see if it is valid and doesn't create cycles in database (neo4j might be able to do this automatically in the future)
		3) Provide an algoirthm in the elixir backend to generate an optimized schedule. This is an NP hard problem, so it should be non-trivial (even if you use the niave solution, mulit-thread it so that it is fast). 

2) Frontend 
	1) User authentication
		1) Users can sign in with google -> done
			1) find most secure authentication method
		2) backend needs to support this. -> send auth tokens to backend as header, backend verifies
	2) Users can create schedules 
		1) auto validation happens in the frontend as you work
			1) courses that don't have all their prereqs are highlight in red
				1) when you hover over one of these courses, prereq paths are shown in yellow with a number denoting their pathID
			2) the majors of interest are highlighted in red if not all requirements met
			3) Users can search for classes and add them to their list
			4) the user is told if the schedule they are editing is valid
		2) It's the right side of the screen (the course catalog) that shows the majors and categories required. It groups courses under collapsable banners of each major, then within each major there are categories that are also collapsable (such as SOFTWARE courses for CPTS). 
			1) Courses that belong in multiple categories go into a new banner outside of both majors labled as such (courses that fit into both majors). These courses are further organized into categories that they both satifsy the requirements for within a major.
	3) Users can save schedules	
		1) on save the backend validates their schedule, sent back error or comfirmation.
		2) users can still save invalid schedules, but they will be marked as such
	4) users can load their schedules
	5) people can view schedules by major, college
	6) people can be on the site and look at colleges, courses
	



USES THAT MUST BE SUPPORTED IN MVP:
- [ ] Users can create schedules
	- [ ] Schedules can be auto generated (NP hard problem) 
	- [ ] Users are told how to make a valid schedule
	- [ ] Users can save schedules as public or private
- [ ] User generated schedules can be browsed by school and by degree
	- [ ] User schedules can be forked
	- [ ] Each schedule is maintained by a single user only
	- [ ] A user can like a schedule to find it again later (like YouTube)
- [ ] Users can add data to schools (add courses, update courses, add prereq paths)



You need to redesign the whole system, get your berrings again. You're not certian how best to proceed, break the system down into its full component parts (this is increadible practice by the way, and you will have plenty of time tomorrow to do this) and then build it back up to accomplish all of the functionality you want. 

First: make a list of requirements. You've done this before so it shouldn't be hard to update this list. 

Second: draw up some general archetecture diagrams to get a high-level overview of the system. 

Third: start drawing up some data flow diagrams, figure out what data needs to be passed. 

Forth: Draw out some component diagrams, not classes exactly, but each logical block that can be decoupled from the other components. Figure out what interfaces these need and how they interact. 

Fifth: Keep building. You are close to being done.
